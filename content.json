{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://seol4.github.io","root":"/"},"pages":[],"posts":[{"title":"","slug":"hi","date":"2021-06-25T07:10:43.658Z","updated":"2021-06-25T07:10:43.658Z","comments":true,"path":"2021/06/25/hi/","link":"","permalink":"https://seol4.github.io/2021/06/25/hi/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"plotly_test","date":"2021-06-25T01:22:08.266Z","updated":"2021-06-25T01:25:25.204Z","comments":true,"path":"2021/06/25/plotly_test/","link":"","permalink":"https://seol4.github.io/2021/06/25/plotly_test/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-06-24T15:00:00.000Z","updated":"2021-06-25T07:25:56.403Z","comments":true,"path":"2021/06/25/hello-world/","link":"","permalink":"https://seol4.github.io/2021/06/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 소스 코드 아래 코드는 ~~이다. 123456import plotly.express as pximport chart_studiogapminder = px.data.gapminder()fig = px.scatter(gapminder.query(&quot;year==2007&quot;), x=&quot;gdpPercap&quot;, y=&quot;lifeExp&quot;, size=&quot;pop&quot;, color=&quot;continent&quot;, hover_name=&quot;country&quot;, log_x=True, size_max=60)fig.show() 그림 2Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"plotly","slug":"plotly","permalink":"https://seol4.github.io/tags/plotly/"}]},{"title":"210625_connect_Plotly_Github_1.md","slug":"210625_connect_Plotly_Github_1","date":"2021-06-24T15:00:00.000Z","updated":"2021-06-25T07:01:32.782Z","comments":true,"path":"2021/06/25/210625_connect_Plotly_Github_1/","link":"","permalink":"https://seol4.github.io/2021/06/25/210625_connect_Plotly_Github_1/","excerpt":"","text":"12!pip install plotly!pip install chart_studio Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (4.4.1) Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from plotly) (1.15.0) Requirement already satisfied: retrying&gt;=1.3.3 in /usr/local/lib/python3.7/dist-packages (from plotly) (1.3.3) Requirement already satisfied: chart_studio in /usr/local/lib/python3.7/dist-packages (1.1.0) Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from chart_studio) (1.15.0) Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from chart_studio) (4.4.1) Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from chart_studio) (2.23.0) Requirement already satisfied: retrying&gt;=1.3.3 in /usr/local/lib/python3.7/dist-packages (from chart_studio) (1.3.3) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;chart_studio) (2.10) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;chart_studio) (1.24.3) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;chart_studio) (2021.5.30) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;chart_studio) (3.0.4) 123456import plotly.express as pximport chart_studiogapminder = px.data.gapminder()fig = px.scatter(gapminder.query(&quot;year==2007&quot;), x=&quot;gdpPercap&quot;, y=&quot;lifeExp&quot;, size=&quot;pop&quot;, color=&quot;continent&quot;, hover_name=&quot;country&quot;, log_x=True, size_max=60)fig.show() 123username = &#x27;seol4&#x27; # seol4 -&gt; your_Plotly_usernameapi_key = &#x27;(your_Plotly_API_key)&#x27;chart_studio.tools.set_credentials_file(username=username, api_key=api_key) 1import chart_studio.plotly as py 1py.plot(fig, filename = &#x27;gdp_per_cap&#x27;, auto_open=True) &#39;https://plotly.com/~seol4/1/&#39; 12import chart_studio.tools as tlstls.get_embed(&#x27;https://plotly.com/~seol4/1/&#x27;) &#39;&lt;iframe id=&quot;igraph&quot; scrolling=&quot;no&quot; style=&quot;border:none;&quot; seamless=&quot;seamless&quot; src=&quot;https://plotly.com/~seol4/1.embed&quot; height=&quot;525&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;&#39;","categories":[],"tags":[{"name":"Github","slug":"Github","permalink":"https://seol4.github.io/tags/Github/"},{"name":"Proxy","slug":"Proxy","permalink":"https://seol4.github.io/tags/Proxy/"}]},{"title":"","slug":"210623","date":"2021-06-23T07:07:26.090Z","updated":"2021-06-23T07:06:16.512Z","comments":true,"path":"2021/06/23/210623/","link":"","permalink":"https://seol4.github.io/2021/06/23/210623/","excerpt":"","text":"https://numpy.org/devdocs/user/absolute_beginners.html NumPy 설치하기 1# conda install numpy 혹은 pip install numpy NumPy 가져오기 1import numpy as np 예제 코드 123a = np.arange(6)a2 = a[np.newaxis, :]a2.shape (1, 6) Array란? 123a = np.array([1, 2, 3, 4, 5, 6])a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])print(a[0]) [1 2 3 4] 기본 배열을 만드는 방법 12import numpy as npa = np.array([1, 2, 3]) 1np.zeros(2) array([0., 0.]) 1np.ones(2) array([1., 1.]) 1np.empty(2) array([1., 1.]) 1np.arange(4) array([0, 1, 2, 3]) 1np.arange(2, 9, 2) # 첫 번째 숫자, 마지막 숫자, 단계 크기 array([2, 4, 6, 8]) 1np.linspace(0, 10, num=5) # 지정된 간격으로 선형 간격을 갖는 array([ 0. , 2.5, 5. , 7.5, 10. ]) 12x = np.ones(2, dtype=np.int64) # 기본 데이터 유형은 (np.float64)이지만, dtype 키워드를 사용하여 원하는 데이터 유형을 명시적으로 지정한다.x array([1, 1]) 요소 추가, 제거 및 정렬 123456arr = np.array([2, 1, 5, 3, 7, 4, 6, 8])np.sort(arr) # sort는 정렬된 배열 복사본을 반환한다.# argsort : 지정된 축을 따른 간접 정렬# lexsort : 여러 키에 대한 간접적인 안정적인 정렬# searchsorted : 정렬된 배열에서 요소를 찾는다.# partition : 부분 정렬 array([1, 2, 3, 4, 5, 6, 7, 8]) 123a = np.array([1, 2, 3, 4])b = np.array([5, 6, 7, 8])np.concatenate((a, b)) array([1, 2, 3, 4, 5, 6, 7, 8]) 123x = np.array([[1, 2], [3, 4]])y = np.array([[5, 6]])np.concatenate((x, y), axis=0) array([[1, 2], [3, 4], [5, 6]]) 배열의 모양과 크기 알기 12array_example = np.array([[[0, 1, 2, 3], [4, 5, 6, 7]], [[0, 1, 2, 3], [4, 5, 6, 7]], [[0, 1, 2, 3], [4, 5, 6, 7]]])array_example.ndim # 배열의 축 수 또는 차원을 알려준다. 3 1array_example.size # 배열의 총 요소 수를 알려준다. 배열의 모양 요소의 곱이다. 24 12array_example.shape # 배열의 각 차원을 따라 저장된 요소 수를 나타내는 정수 튜플을 표시한다.# 3차원 배열 내에 들어있는 2차원 배열의 개수 3개, 2차원 배열 내에 들어있는 1차원 배열의 개수 2개, 1차원 배열 내에 들어있는 요소 4개 (3, 2, 4) 배열의 형태를 변경할 수 있다. 12a = np.arange(6)print(a) [0 1 2 3 4 5] 12b = a.reshape(3, 2) # 데이터를 변경하지 않고 배열에 새로운 모양을 제공한다. 배열을 재구성한다.print(b) [[0 1] [2 3] [4 5]] 12np.reshape(a, newshape=(1,6), order=&#x27;C&#x27;) # 차례대로 모양을 바꿀 배열, 원하는 새 모양(정수 또는 튜플을 지정할 수 있다. 정수를 지정하면 결과는 해당 길이의 배열이 된다.), 인덱스 순서. # C는 마지막 축 인덱스가 가장 빠르게 변경되고 첫 번째 축 인덱스가 가장 느리게 변경되는 순서이다. array([[0, 1, 2, 3, 4, 5]]) 1D 배열을 2D 배열로 변환하는 방법 (배열에 새 축을 추가하는 방법) 12a = np.array([1, 2, 3, 4, 5, 6])a.shape (6,) 12a2 = a[np.newaxis, :] # 새 축을 추가한다.a2.shape (1, 6) 12row_vector = a[np.newaxis, :] # 첫 번째 차원을 따라 축을 삽입하여 1D 배열을 행 벡터로 변환할 수 있다.row_vector.shape (1, 6) 12col_vector = a[:, np.newaxis] # 열 벡터의 경우 두 번째 차원을 따라 축을 삽입할 수 있다.col_vector.shape (6, 1) 1234#a = np.array([1, 2, 3, 4, 5, 6])#a.shapeb = np.expand_dims(a, axis=1) # 인덱스 위치 1에 축을 추가한다.b.shape (6, 1) 12c = np.expand_dims(a, axis=0)c.shape (1, 6) 인덱싱 및 슬라이싱 12data = np.array([1, 2, 3])data[1] 2 1data[0:2] array([1, 2]) 1data[1:] array([2, 3]) 1data[-2:] array([2, 3]) 12a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])print(a[a &lt; 5]) [1 2 3 4] 12five_up = (a &gt;= 5)print(a[five_up]) [ 5 6 7 8 9 10 11 12] 12divisible_by_2 = a[a%2==0]print(divisible_by_2) [ 2 4 6 8 10 12] 12c = a[(a &gt; 2) &amp; (a &lt; 11)]print(c) [ 3 4 5 6 7 8 9 10] 12five_up = (a &gt; 5) | ( a == 5)print(five_up) [[False False False False] [ True True True True] [ True True True True]] 123a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])b = np.nonzero(a &lt; 5) # a &lt; 5인 행 인덱스와 열 인덱스 배열을 출력한다.print(b) (array([0, 0, 0, 0]), array([0, 1, 2, 3])) 123list_of_coordinates = list(zip(b[0], b[1]))for coord in list_of_coordinates: print(coord) (0, 0) (0, 1) (0, 2) (0, 3) 1print(a[b]) [1 2 3 4] 12not_there = np.nonzero(a == 42)print(not_there) # 찾고 있는 요소가 배열에 없으면 반환된 인덱스 배열은 비어 있다. (array([], dtype=int64), array([], dtype=int64)) 기존 데이터에서 배열을 만드는 방법 123a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])arr1 = a[3:8]arr1 array([4, 5, 6, 7, 8]) 1234# 기존 배열을 수직 및 수평으로 쌓을 수 있다.a1 = np.array([[1, 1], [2, 2]])a2 = np.array([[3, 3], [4, 4]])np.vstack((a1, a2)) # 세로로 쌓기 array([[1, 1], [2, 2], [3, 3], [4, 4]]) 1np.hstack((a1, a2)) # 가로로 쌓기 array([[1, 1, 3, 3], [2, 2, 4, 4]]) 12x = np.arange(1, 25).reshape(2, 12)x array([[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]) 1np.hsplit(x, 3) [array([[ 1, 2, 3, 4], [13, 14, 15, 16]]), array([[ 5, 6, 7, 8], [17, 18, 19, 20]]), array([[ 9, 10, 11, 12], [21, 22, 23, 24]])] 1np.hsplit(x, (3, 4)) # 세 번째와 네 번째 열 이후에 배열을 분할 [array([[ 1, 2, 3], [13, 14, 15]]), array([[ 4], [16]]), array([[ 5, 6, 7, 8, 9, 10, 11, 12], [17, 18, 19, 20, 21, 22, 23, 24]])] 1234# view 얕은 복사본a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])b1 = a[0, :]b1 array([1, 2, 3, 4]) 12b1[0] = 99b1 array([99, 2, 3, 4]) 1a # b에서 수정한 해당 요소가 a에서도 수정된다. array([[99, 2, 3, 4], [ 5, 6, 7, 8], [ 9, 10, 11, 12]]) 12# copy 깊은 복사본b2 = a.copy() 기본 배열 연산 123data = np.array([1, 2])ones = np.ones(2, dtype=int)data + ones array([2, 3]) 1data - ones array([0, 1]) 1data * data array([1, 4]) 1data / data array([1., 1.]) 12a = np.array([1, 2, 3, 4])a.sum() 10 12b = np.array([[1, 1], [2, 2]])b.sum(axis=0) # 행 축을 합산한다. array([3, 3]) 1b.sum(axis=1) array([2, 4]) 방송 123# 방송은 NumPY는 곱셈이 각 셀에서 발생한다는 개념이다.data = np.array([1.0, 2.0])data * 1.6 array([1.6, 3.2]) 더 유용한 배열 연산 1data.max() 2.0 1data.min() 1.0 1data.sum() 3.0 1234a = np.array([[0.45053314, 0.17296777, 0.34376245, 0.5510652],... [0.54627315, 0.05093587, 0.40067661, 0.55645993],... [0.12697628, 0.82485143, 0.26590556, 0.56917101]])a.sum() 4.8595784 1a.min() 0.05093587 1a.min(axis=0) # 각 열 내에서 최소값을 찾는다. array([0.12697628, 0.05093587, 0.26590556, 0.5510652 ]) 행렬 만들기 12data = np.array([[1, 2], [3, 4], [5, 6]])data array([[1, 2], [3, 4], [5, 6]]) 1data[0, 1] 2 1data[1:3] array([[3, 4], [5, 6]]) 1data[0:2, 0] # 행의 인덱스 0부터 1 중에 열 인덱스가 0인 것 array([1, 3]) 1data.max() 6 1data.min() 1 1data.sum() 21 1data.max(axis=0) array([5, 6]) 1data.max(axis=1) array([2, 4, 6]) 123data = np.array([[1, 2], [3, 4]])ones = np.array([[1, 1], [1, 1]])data + ones array([[2, 3], [4, 5]]) 123data = np.array([[1, 2], [3, 4], [5, 6]])ones_row = np.array([[1, 1]])data + ones_row array([[2, 3], [4, 5], [6, 7]]) 1np.ones((4, 3, 2)) array([[[1., 1.], [1., 1.], [1., 1.]], [[1., 1.], [1., 1.], [1., 1.]], [[1., 1.], [1., 1.], [1., 1.]], [[1., 1.], [1., 1.], [1., 1.]]]) 1np.ones(3) array([1., 1., 1.]) 1np.zeros(3) array([0., 0., 0.]) 12rng = np.random.default_rng(0)rng.random(3) array([0.63696169, 0.26978671, 0.04097352]) 1np.ones((3, 2)) array([[1., 1.], [1., 1.], [1., 1.]]) 1np.zeros((3, 2)) array([[0., 0.], [0., 0.], [0., 0.]]) 1rng.random((3, 2)) array([[0.01652764, 0.81327024], [0.91275558, 0.60663578], [0.72949656, 0.54362499]]) 난수 생성 1rng.integers(5, size=(2, 4)) # 0과 4 사이의 임의 정수로 구성된 2X4 배열을 생성 array([[2, 4, 1, 4], [3, 0, 1, 4]]) 고유 항목 및 개수를 얻는 방법 123a = np.array([11, 11, 12, 13, 14, 15, 16, 17, 12, 13, 11, 14, 18, 19, 20])unique_values = np.unique(a) # 고유 값을 인쇄한다.print(unique_values) [11 12 13 14 15 16 17 18 19 20] 12unique_values, indices_list = np.unique(a, return_index=True)print(indices_list) # 고유 값 인덱스의 위치 [ 0 2 3 4 5 6 7 12 13 14] 12unique_values, occurrence_count = np.unique(a, return_counts=True)print(occurrence_count) # 빈도 수 [3 2 2 2 1 1 1 1 1 1] 123a_2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [1, 2, 3, 4]]) # 2D 배열unique_values = np.unique(a_2d)print(unique_values) # 축 인수가 전달되지 않으면 2D 배열이 평면화된다. [ 1 2 3 4 5 6 7 8 9 10 11 12] 12unique_rows = np.unique(a_2d, axis=0) # 고유한 행이나 열을 얻기 위해 axis 인수를 전달한다.print(unique_rows) [[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] 123unique_rows, indices, occurrence_count = np.unique( a_2d, axis=0, return_counts=True, return_index=True)print(unique_rows) # 고유 행 [[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] 1print(indices) # 인덱스 위치 [0 1 2] 1print(occurrence_count) # 발생 수 [2 1 1] 행렬 전치 및 재구성 1data.reshape(2, 3) array([[1, 2, 3], [4, 5, 6]]) 1data.reshape(3, 2) array([[1, 2], [3, 4], [5, 6]]) 12arr = np.arange(6).reshape((2, 3))arr array([[0, 1, 2], [3, 4, 5]]) 1arr.transpose() array([[0, 3], [1, 4], [2, 5]]) 1arr.T array([[0, 3], [1, 4], [2, 5]]) 배열을 뒤집는 방법 1234# 1D 배열 반전arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])reversed_arr = np.flip(arr)print(&#x27;Reversed Array: &#x27;, reversed_arr) Reversed Array: [8 7 6 5 4 3 2 1] 1234# 2D 배열 반전arr_2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])reversed_arr = np.flip(arr_2d)print(reversed_arr) [[12 11 10 9] [ 8 7 6 5] [ 4 3 2 1]] 123# 행만 반전reversed_arr_rows = np.flip(arr_2d, axis=0)print(reversed_arr_rows) [[ 9 10 11 12] [ 5 6 7 8] [ 1 2 3 4]] 123# 열만 반전reversed_arr_columns = np.flip(arr_2d, axis=1)print(reversed_arr_columns) [[ 4 3 2 1] [ 8 7 6 5] [12 11 10 9]] 12arr_2d[1] = np.flip(arr_2d[1]) # 두 번째 행의 내용 반전print(arr_2d) [[ 1 2 3 4] [ 8 7 6 5] [ 9 10 11 12]] 12arr_2d[:,1] = np.flip(arr_2d[:,1]) # 두 번째 열 반전print(arr_2d) [[ 1 10 3 4] [ 8 7 6 5] [ 9 2 11 12]] 다차원 배열 재구성 및 평탄화 12x = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])x.flatten() array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) 123a1 = x.flatten()a1[0] = 99print(x) [[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] 1print(a1) # flatten은 새 배열을 변경해도 상위 배열에 영향을 주지 않는다. [99 2 3 4 5 6 7 8 9 10 11 12] 123a2 = x.ravel()a2[0] = 98print(x) [[98 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] 1print(a2) # ravel은 새 배열에 대한 변경 사항이 상위 배열에 영향을 준다. [98 2 3 4 5 6 7 8 9 10 11 12] 더 많은 정보를 위해 docstring에 접근하는 방법 1help(max) Help on built-in function max in module builtins: max(...) max(iterable, *[, default=obj, key=func]) -&gt; value max(arg1, arg2, *args, *[, key=func]) -&gt; value With a single iterable argument, return its biggest item. The default keyword-only argument specifies an object to return if the provided iterable is empty. With two or more arguments, return the largest argument. 1max? 12a = np.array([1, 2, 3, 4, 5, 6])a? 123def double(a): return a * 2double? 1double?? 1len? 1len?? NumPy 객체를 저장하고 로드하는 방법 1234a = np.array([1, 2, 3, 4, 5, 6])np.save(&#x27;filename&#x27;, a) # filename.npy로 저장b = np.load(&#x27;filename.npy&#x27;)print(b) [1 2 3 4 5 6] 1","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"plotly","slug":"plotly","permalink":"https://seol4.github.io/tags/plotly/"},{"name":"Github","slug":"Github","permalink":"https://seol4.github.io/tags/Github/"},{"name":"Proxy","slug":"Proxy","permalink":"https://seol4.github.io/tags/Proxy/"}]}